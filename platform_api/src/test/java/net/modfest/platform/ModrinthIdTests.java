package net.modfest.platform;

import net.modfest.platform.misc.ModrinthIdUtils;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class ModrinthIdTests {
	@Test
	public void testSlugs() {
		// Slugs should *not* be counted as valid modrinth ids
		Assertions.assertFalse(ModrinthIdUtils.isValidModrinthId("bob"));
		Assertions.assertFalse(ModrinthIdUtils.isValidModrinthId("modfest"));
		Assertions.assertFalse(ModrinthIdUtils.isValidModrinthId("myusernamelol"));
		Assertions.assertFalse(ModrinthIdUtils.isValidModrinthId("a")); // Someone actually has this slug lol
	}

	@Test
	public void validIds() {
		// These are valid ids, pulled straight from user pages
		Assertions.assertTrue(ModrinthIdUtils.isValidModrinthId("6tIsOwVY"));
		Assertions.assertTrue(ModrinthIdUtils.isValidModrinthId("Dc7EYhxG"));
		Assertions.assertTrue(ModrinthIdUtils.isValidModrinthId("isUSgXvG"));
		Assertions.assertTrue(ModrinthIdUtils.isValidModrinthId("isUSgXvG"));
	}

	@Test
	public void invalidId() {
		// Random unicode should not be in a modrinth id
		Assertions.assertFalse(ModrinthIdUtils.isValidModrinthId("ꙮ"));
		// Exactly the correct length (according to UTF16), but once again unicode
		Assertions.assertFalse(ModrinthIdUtils.isValidModrinthId("ꙮꙮꙮꙮ"));
		// Exactly the correct length (when not using UTF16 length), but once again unicode
		Assertions.assertFalse(ModrinthIdUtils.isValidModrinthId("ꙮꙮꙮꙮꙮꙮꙮꙮ"));
		// Correct length for an id, but not valid characterd
		Assertions.assertFalse(ModrinthIdUtils.isValidModrinthId("_-_-_-_-"));
		// Valid characters, but too short
		Assertions.assertFalse(ModrinthIdUtils.isValidModrinthId("aaaaaaa"));
		// Valid characters, but way too long
		Assertions.assertFalse(ModrinthIdUtils.isValidModrinthId("aaaaaaaaaaaa"));
		// These are valid base64, but don't fit in a 64-bit integer
		Assertions.assertFalse(ModrinthIdUtils.isValidModrinthId("LygHa16AHYG"));
		Assertions.assertFalse(ModrinthIdUtils.isValidModrinthId("MygHa16AHYF"));
	}

	@Test
	public void bigLength() {
		// Modrinth doesn't generate ids of length more than 8, but we're going to be
		// at least slightly lenient and accept them anyway (see comments in `isValidModrinthId` for more info)

		// These are all generated by running the original code:
		// https://github.com/modrinth/code/blob/0d7934e3b8e38ca426c61e9f2f504c7530f58b9f/apps/labrinth/src/models/v3/ids.rs#L42

		// Length of 9
		Assertions.assertTrue(ModrinthIdUtils.isValidModrinthId("uzTfoxKBM"));
		Assertions.assertTrue(ModrinthIdUtils.isValidModrinthId("zHobZBO58"));
		Assertions.assertTrue(ModrinthIdUtils.isValidModrinthId("wthkQ7PrF"));
		Assertions.assertTrue(ModrinthIdUtils.isValidModrinthId("jxlOwZRV8"));

		// Length of 10
		Assertions.assertTrue(ModrinthIdUtils.isValidModrinthId("KpD4mpvy6D"));
		Assertions.assertTrue(ModrinthIdUtils.isValidModrinthId("T8y72yWWZV"));
		Assertions.assertTrue(ModrinthIdUtils.isValidModrinthId("5tQijfEDdw"));
		Assertions.assertTrue(ModrinthIdUtils.isValidModrinthId("RAQMPJ3mns"));

		// Length of 11
		Assertions.assertTrue(ModrinthIdUtils.isValidModrinthId("DF5f0QKn0C0"));
		Assertions.assertTrue(ModrinthIdUtils.isValidModrinthId("7PWFTl36JBU"));
		Assertions.assertTrue(ModrinthIdUtils.isValidModrinthId("JoYLvsLLOtr"));
		Assertions.assertTrue(ModrinthIdUtils.isValidModrinthId("KRL8yXriY7G"));
	}
}
